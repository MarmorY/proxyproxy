package main
func main() {

	log.SetHandler(cli.New(os.Stdout))

	//Define CLI flags
	destinationProxy := flag.String("proxy", "", "destination proxy: <ip addr>:<port>")
	listenAddress := flag.String("listen", "127.0.0.1:3128", "adress to list on: [ip addr]:<port>")
	debug := flag.Bool("v", false, "Verbose output")

	flag.Parse()

	if *destinationProxy == "" {
		fmt.Println("Parameter \"proxy\" is not set.")
		flag.PrintDefaults()
		return
	}

	if *listenAddress == "" {
		fmt.Println("Parameter \"listen\" is not set.")
		flag.PrintDefaults()
		return
	}

	if *debug {
		log.SetLevel(log.DebugLevel)
		log.Debug("Verbos output is enabled.")
	}

	log.Infof("Listening on %v", *listenAddress)
	log.Infof("Connection to %v", *destinationProxy)

	ln, err := net.Listen("tcp", *listenAddress)
	if err != nil {
		log.Fatalf("Error: %v", err)
	}
	for {
		conn, err := ln.Accept()
		if err != nil {
			log.Fatalf("Error: %v", err)
		}
		go handleConnection(conn, *destinationProxy)
}



	proxyConn, err := net.DialTimeout("tcp", proxyAddress, 10*time.Second)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("Error opening connection to proxy: %v", err))
	}
